notes:

src 

    /adapter     ->  Este package se encarga de realizar las integraciones con otras aplicaciones.
        /model       -> Acá encontraremos el package modeladapter con todos los Struct con los request y response de las distintas intregaciones a las que vayamos.

    /api         ->  Aquí encontramos el package routes con todas las rutas y configuración basica de swagger. 
                    Utilizamos la libreria package "github.com/gin-gonic/gin v1.7.4" para la creación y handler de las rutas.

    /config      ->  Aqui tenemos el package config el cual tiene lo necesario para poder levantar el archivo envoirment.env.
                    donde tenemos las variables globales de la aplicaion las cuales las podemos utilizar en cualquier package
                    para realizar esto, utilizamos el package "github.com/joho/godotenv v1.4.0" , la cual levanta todas las propiedades que tiene el envoirment
                    posterior a eso podemos instanciarlo mediante el package "os" pasandole la key de la propiedad.

    /dataservice ->  Aqui dentro tendremos el package dataservice que se encarga de realizar las conexiones a la base de datos o a cualquier persistencia.
        /model       -> Acá encontraremos el package modeldataservice donde tendremos todos los Struct con los modelos que vas a devolver de la base de datos.

    /docs        ->  Puramente configuracion de swagger  el cual cada vez que realizes un cambio agregandole recursos o endpoint 
                    hay que correr el comando "swag init -g paht" donde se encuentre api.go con todas las routes. el cual actualiza esta documentación
                    "github.com/swaggo/files" y "github.com/swaggo/swag v1.7.4"  Swagger.
                    "github.com/swaggo/gin-swagger v1.3.3" integracion de Gin.

    /model       ->  Aqui tendremos todos los Struct con los modelos de response y request especificos de cada ruta o endpoint.

    /service     ->  Dentro de este package service se encontraran todos los metodos con las validaciones y logica especifica. 
                     al utilizar gin para las rutas, todos estos metodos reciben como parametro el "gin.Context" que es el contexto de las peticiones.
                     el mismo contexto en el cual vamos a realizar la respuesta de nuestro endpoint.
                     para la validación del json del request utilizamos la libreria "github.com/go-playground/validator/v10 v10.9.0" en la cual podemos
                     validar dinamicamente todas las peticiones, cuyas validaciones la vamos a especificar en el Struct del model.

*.env  -> Archivo con la configuración de cada ambiente y variables globales de aplicacion.

main   -> package principal, el main en el cual arranca la aplicación.

go.mod -> archivo donde se encuentra todas las librearias que importamos y utilizamos en nuestra aplicación.